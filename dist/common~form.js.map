{"version":3,"file":"common~form.js","mappings":";;;;;;;;;;;;;AAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA","sources":["webpack://milberger/./src/js/form.js"],"sourcesContent":["'use strict';\r\n\r\nexport class Form {\r\n    constructor(formContainer) {\r\n        this.formContainer = formContainer;\r\n        this.form = this.formContainer.querySelector(\"form\");\r\n        this.formSubmitBtn = this.form.querySelector('input[type=\"submit\"]');\r\n        this.requiredInputs = {};\r\n        if (this.form.querySelector('fieldset')) {\r\n            this.fieldsetNextBtn = this.formContainer.querySelector('.btn--next');\r\n            this.fieldsets = this.form.querySelectorAll('fieldset');\r\n            this.requiredInputs = [...this.fieldsets].reduce((acc, fieldset) => {\r\n                acc[fieldset.dataset.name] = [...fieldset.querySelectorAll('input[required]')];\r\n                return acc;\r\n            }, this.requiredInputs);\r\n        } else {\r\n            this.requiredInputs['main'] = [...this.form.querySelectorAll('input[required]')]\r\n        };\r\n        this.emptyRequiredInputs = [];\r\n\r\n        Object.values(this.requiredInputs).forEach((inputs) => {\r\n            inputs.forEach((input) => {\r\n                input.addEventListener('change', this.watchInput);\r\n                if (input.dataset.mask) {\r\n                    input.addEventListener('focus', this.watchMaskedInput);\r\n                    input.addEventListener('input', this.watchMaskedInput);\r\n                    input.addEventListener('blur', this.watchInput);\r\n\r\n                };\r\n            });\r\n        });\r\n\r\n        [this.formSubmitBtn, this.fieldsetNextBtn].forEach((btn) => {\r\n            if (btn) btn.addEventListener('click', this.validateOnSubmit);\r\n        });\r\n    }\r\n\r\n    watchInput = (e) => {\r\n        let value = e.target.value;\r\n\r\n        if (((e.target.type == 'checkbox') || (e.target.type == 'radio')) && (!e.target.checked)) {\r\n            value = '';\r\n        } else if (e.target.dataset.mask && (e.target.dataset.mask.length != e.target.value.length)) {\r\n            value = '';\r\n            e.target.value = '';\r\n        };\r\n\r\n        const requiredInputs = this.getRequiredInputs();\r\n        const allInputsWithSameName = requiredInputs.filter(input => input.name == e.target.name);\r\n\r\n        allInputsWithSameName.forEach((input) => {\r\n            if (value != '') {\r\n                input.dataset.notEmpty = 1;\r\n                this.removeInvalidClasses(input);\r\n            } else {\r\n                input.dataset.notEmpty = '';\r\n                if (this.emptyRequiredInputs.includes(input)) this.setInvalidClasses(input);\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    watchMaskedInput = (e) => {\r\n        const input = e.target;\r\n        const mask = input.dataset.mask;\r\n        const maskFirstEditable = mask.indexOf(\"_\");\r\n        const inputValueDigits = input.value.slice(maskFirstEditable).match(/\\d/g) || [];\r\n        let selectionStart = input.selectionStart;\r\n        let selectionEnd = input.selectionEnd;\r\n\r\n        if (!inputValueDigits.length) {\r\n            input.value = mask.slice(0, maskFirstEditable);\r\n            return;\r\n        };\r\n\r\n        const maskedValue = inputValueDigits.reduce((mask, value) => {\r\n            return mask.replace('_', value);\r\n        }, mask);\r\n\r\n        const lastDigit = inputValueDigits[inputValueDigits.length - 1];\r\n        input.value = maskedValue.slice(0, maskedValue.lastIndexOf(lastDigit) + 1);\r\n\r\n        setSelection();\r\n\r\n        function setSelection() {\r\n            if (input.selectionEnd != selectionEnd) {\r\n                while (input.selectionEnd != selectionEnd) {\r\n                    if (!/\\d|s/.test(input.value[selectionEnd - 1])) {\r\n                        if (input.selectionEnd < selectionEnd) {\r\n                            selectionEnd--;\r\n                            selectionStart--;\r\n                        } else {\r\n                            selectionEnd++;\r\n                            selectionStart++;\r\n                        };\r\n                    } else {\r\n                        input.selectionEnd = selectionEnd;\r\n                        input.selectionStart = selectionStart;\r\n                        return;\r\n                    };\r\n                };\r\n            };\r\n            input.selectionEnd = selectionEnd;\r\n            input.selectionStart = selectionStart;\r\n        }\r\n    }\r\n\r\n    getRequiredInputs = () => {\r\n        const name = this.fieldsets ? this.form.querySelector('fieldset[data-position=\"current\"]').dataset.name : 'main';\r\n        return this.requiredInputs[name];\r\n    }\r\n\r\n    setInvalidClasses = (input) => {\r\n        input.classList.add(\"invalid\");\r\n    }\r\n\r\n    removeInvalidClasses = (input) => {\r\n        input.classList.remove(\"invalid\");\r\n    }\r\n\r\n    validateOnSubmit = (e) => {\r\n        const requiredInputs = this.getRequiredInputs();\r\n        this.emptyRequiredInputs = requiredInputs.filter((input) => {\r\n            if (!input.dataset.notEmpty) {\r\n                this.setInvalidClasses(input);\r\n                return input;\r\n            };\r\n        });\r\n        if (this.emptyRequiredInputs.length) {\r\n            e.stopImmediatePropagation();\r\n            e.preventDefault();\r\n        };\r\n    }\r\n}"],"names":[],"sourceRoot":""}