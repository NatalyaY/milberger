{"version":3,"file":"common~submitForm.js","mappings":";;;;;;;;;;;;;;AAAa;AAC8B;AAC3C;AACO;AACP;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,kDAAkD,4BAA4B;AAC9E,gBAAgB,wDAAS;AACzB;AACA,UAAU;AACV,YAAY,wDAAS,oCAAoC;AACzD;AACA,cAAc;AACd;AACA,uCAAuC,eAAe;AACtD;AACA;AACA;AACA","sources":["webpack://milberger/./src/js/submitForm.js"],"sourcesContent":["'use strict';\r\nimport { openPopup } from './openPopup.js';\r\n\r\nexport function setSubmitFn(form, action, fnOnsuccess = '') {\r\n    return async function onSubmit(e) {\r\n        const layer = document.createElement('div');\r\n        layer.className = 'layer';\r\n        const loader = document.createElement('div');\r\n        loader.className = 'loader';\r\n        for (let i = 1; i <= 12; i++) {\r\n            loader.appendChild(document.createElement('div'));\r\n        };\r\n        layer.appendChild(loader);\r\n        document.body.appendChild(layer);\r\n\r\n        const formValues = [...form.querySelectorAll('input:not([type=\"submit\"])')].reduce((acc, el) => {\r\n            if (el.name) {\r\n                if (!acc['data']) acc['data'] = {};\r\n                let value = el.dataset.add ? el.value + el.dataset.add : el.value;\r\n                acc.data[el.name] = value;\r\n            };\r\n            return acc;\r\n        }, {});\r\n\r\n        if (form.dataset.name) {\r\n            formValues.data['form'] = form.dataset.name;\r\n        };\r\n\r\n        const res = await fetch(action, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(formValues),\r\n        });\r\n\r\n        if (res.status === 200) {\r\n            if (fnOnsuccess) {\r\n                fnOnsuccess();\r\n            } else {\r\n                form.reset();\r\n                const reqFields = form.querySelectorAll('input[data-not-empty]');\r\n                [...reqFields].forEach(field => { field.dataset.notEmpty ='' });\r\n                openPopup('Ваша заявка была', 'успешно отправлена!')();\r\n            }\r\n        } else {\r\n            openPopup('Отправить заявку', 'не удалось')({err: {\r\n                message: res.statusText,\r\n            }});\r\n            const msg = form.querySelector('.err_msg');\r\n            msg.innerText = `Ошибка. ${res.statusText}`;\r\n            msg.style.display = 'block';\r\n        }\r\n    }\r\n}"],"names":[],"sourceRoot":""}